// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var TestArray = require("../_generated/TestArray.bs.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");

Mocha$RescriptMocha.describe("TestArrayTest")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test parse")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = ["", "dsja", "*Sdn das_"];
                        var result = TestArray.parse(given);
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: [
                            "",
                            "dsja",
                            "*Sdn das_"
                          ]
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var given = [];
                        var result = TestArray.parse(given);
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: []
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("test invalid")(undefined, undefined, undefined, (function (param) {
                        var given = "sdas";
                        var result = TestArray.parse(given);
                        Assert$RescriptMocha.ok(Belt_Result.isError(result));
                      }));
              }));
        Mocha$RescriptMocha.describe("test serialize")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = [
                          "",
                          "dsja",
                          "*Sdn das_"
                        ];
                        var result = TestArray.serialize(given);
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: ["", "dsja", "*Sdn das_"]
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var given = [];
                        var result = TestArray.serialize(given);
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: []
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test json")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = [
                          "",
                          "dsja",
                          "*Sdn das_"
                        ];
                        var result = ResultExn.flatMap(TestArray.serializeToJson(given), TestArray.parseJson);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: given
                            });
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var given = [];
                        var result = ResultExn.flatMap(TestArray.serializeToJson(given), TestArray.parseJson);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: given
                            });
                      }));
              }));
      }));

/*  Not a pure module */
