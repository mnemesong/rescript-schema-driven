// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var TestList = require("../_generated/TestList.bs.js");
var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");

Mocha$RescriptMocha.describe("TestListTest")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test parse")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = [0, -576.12, 8];
                        var result = TestList.parse(given);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: {
                                hd: 0.0,
                                tl: {
                                  hd: -576.12,
                                  tl: {
                                    hd: 8.0,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            });
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var given = [];
                        var result = TestList.parse(given);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: /* [] */0
                            });
                      }));
                Mocha$RescriptMocha.it("test invalid")(undefined, undefined, undefined, (function (param) {
                        var given = ["sdas"];
                        var result = TestList.parse(given);
                        Assert$RescriptMocha.ok(Belt_Result.isError(result));
                      }));
              }));
        Mocha$RescriptMocha.describe("test serialize")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var result = TestList.serialize({
                              hd: 0.0,
                              tl: {
                                hd: -576.12,
                                tl: {
                                  hd: 8.0,
                                  tl: /* [] */0
                                }
                              }
                            });
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: [0, -576.12, 8]
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var result = TestList.serialize(/* [] */0);
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: []
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test json")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          hd: 0.0,
                          tl: {
                            hd: -576.12,
                            tl: {
                              hd: 8.0,
                              tl: /* [] */0
                            }
                          }
                        };
                        var result = ResultExn.flatMap(TestList.serializeToJson(given), TestList.parseJson);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: given
                            });
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var result = ResultExn.flatMap(TestList.serializeToJson(/* [] */0), TestList.parseJson);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: /* [] */0
                            });
                      }));
              }));
      }));

/*  Not a pure module */
