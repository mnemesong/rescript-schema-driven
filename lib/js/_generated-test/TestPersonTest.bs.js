// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var TestPerson = require("../_generated/TestPerson.bs.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");

Mocha$RescriptMocha.describe("TestPersonTest")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test parse")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = {
          id: 5,
          ages: 8,
          name: "John"
        };
                        var result = TestPerson.parse(given);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: {
                                id: 5,
                                ages: 8,
                                name: "John"
                              }
                            });
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var given = {
          id: 5,
          ages: null,
          name: ""
        };
                        var result = TestPerson.parse(given);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: {
                                id: 5,
                                ages: undefined,
                                name: ""
                              }
                            });
                      }));
                Mocha$RescriptMocha.it("test valid 3")(undefined, undefined, undefined, (function (param) {
                        var given = {
          id: 5,
          ages: null,
          name: "",
          extra1: true,
          extra2: {val: 12}
        };
                        var result = TestPerson.parse(given);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: {
                                id: 5,
                                ages: undefined,
                                name: ""
                              }
                            });
                      }));
                Mocha$RescriptMocha.it("test invalid")(undefined, undefined, undefined, (function (param) {
                        var given = {
          id: 5,
          ages: "dsasf",
          name: ""
        };
                        var result = TestPerson.parse(given);
                        Assert$RescriptMocha.ok(Belt_Result.isError(result));
                      }));
              }));
        Mocha$RescriptMocha.describe("test serialize")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var result = TestPerson.serialize({
                              id: 5,
                              ages: 8,
                              name: "John"
                            });
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: {
          id: 5,
          ages: 8,
          name: "John"
        }
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test json")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test valid 1")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          id: 5,
                          ages: 8,
                          name: "John"
                        };
                        var result = ResultExn.flatMap(TestPerson.serializeToJson(given), TestPerson.parseJson);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: given
                            });
                      }));
                Mocha$RescriptMocha.it("test valid 2")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          id: 5,
                          ages: undefined,
                          name: ""
                        };
                        var result = ResultExn.flatMap(TestPerson.serializeToJson(given), TestPerson.parseJson);
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: given
                            });
                      }));
              }));
      }));

/*  Not a pure module */
