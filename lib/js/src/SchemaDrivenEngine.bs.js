// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var SchemaDrivenModule = require("./SchemaDrivenModule.bs.js");
var SchemaDrivenResultCode = require("./SchemaDrivenResultCode.bs.js");
var SchemaDrivenNamesCorrector = require("./SchemaDrivenNamesCorrector.bs.js");
var SchemaDrivenUnexpectedFilesStrategy = require("./SchemaDrivenUnexpectedFilesStrategy.bs.js");

function def(dir, plugins, unexpectedFilesStrategy) {
  var initScheme = (function (path, plugins, removeOnMatch) {
    return {
      path: path,
      plugins: plugins,
      removeOnMatch: removeOnMatch
    };
  });
  var result = unexpectedFilesStrategy !== 0 ? ({
        TAG: /* Ok */0,
        _0: undefined
      }) : SchemaDrivenUnexpectedFilesStrategy.cleanDirectory(dir);
  return Belt_Result.map(result, (function (param) {
                return initScheme(dir, plugins, SchemaDrivenUnexpectedFilesStrategy.removeOnMatch(unexpectedFilesStrategy));
              }));
}

var path = (function (dir) {
  return dir.path;
});

var plugins = (function (dir) {
  return dir.plugins;
});

var isRemoveOnMatch = (function (dir) {
  return dir.removeOnMatch;
});

function printModule(eng, moduleName, code) {
  var resolvePath = (function(parts) {
    return require("path").resolve(...parts);
  });
  var moduleName$p = SchemaDrivenNamesCorrector.modifyModuleName(moduleName);
  var moduleFilePath = ResultExn.tryExec(function (param) {
        return resolvePath([
                    path(eng),
                    moduleName$p + ".res"
                  ]);
      });
  var resultCode$p = Belt_Array.reduce(plugins(eng), code, (function (acc, p) {
          return Curry._1(p, acc);
        }));
  var code$p = SchemaDrivenResultCode.printModuleBody(resultCode$p);
  var result = ResultExn.flatMap(moduleFilePath, (function (p) {
          return ResultExn.tryExec(function (param) {
                      return SchemaDrivenUnexpectedFilesStrategy.writeFileSync(p, code$p, isRemoveOnMatch(eng));
                    });
        }));
  return ResultExn.map(result, (function (param) {
                return SchemaDrivenModule.def(moduleName$p);
              }));
}

exports.def = def;
exports.path = path;
exports.plugins = plugins;
exports.isRemoveOnMatch = isRemoveOnMatch;
exports.printModule = printModule;
/* No side effect */
