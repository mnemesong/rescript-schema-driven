// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var SchemaDrivenResultCode = require("./SchemaDrivenResultCode.bs.js");

var RescriptStructExn = /* @__PURE__ */Caml_exceptions.create("SchemaDrivenRescriptStructPlugin.RescriptStructExn");

function structErrToExn(res) {
  if (res.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: res._0
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: {
              RE_EXN_ID: RescriptStructExn,
              _1: res._0
            }
          };
  }
}

async function thenStructErrtoExn(res) {
  return structErrToExn(await res);
}

var rescriptStructParse = "let parse = (x) => x->S.parseWith(struct)\n->SchemaDrivenRescriptStructPlugin.structErrToExn";

var rescriptStructParseAny = "let parseAny = (x) => x->S.parseAnyWith(struct)\n->SchemaDrivenRescriptStructPlugin.structErrToExn";

var rescriptStructParseJsonString = "let parseJsonString = (x) => x->S.parseJsonStringWith(struct)\n->SchemaDrivenRescriptStructPlugin.structErrToExn";

var rescriptStructParseAsync = "let parseAsync = (x) => x->S.parseAsyncWith(struct)\n->SchemaDrivenRescriptStructPlugin.thenStructErrToExn";

function plugin(resultCodeDeclar) {
  return SchemaDrivenResultCode.addModuleType(SchemaDrivenResultCode.addFuncs(resultCodeDeclar, [
                  rescriptStructParse,
                  rescriptStructParseAny,
                  rescriptStructParseJsonString,
                  rescriptStructParseAsync
                ]), "SchemaDrivenRescriptStructPlugin.ModuleType with type t = " + resultCodeDeclar.t);
}

exports.RescriptStructExn = RescriptStructExn;
exports.structErrToExn = structErrToExn;
exports.thenStructErrtoExn = thenStructErrtoExn;
exports.rescriptStructParse = rescriptStructParse;
exports.rescriptStructParseAny = rescriptStructParseAny;
exports.rescriptStructParseJsonString = rescriptStructParseJsonString;
exports.rescriptStructParseAsync = rescriptStructParseAsync;
exports.plugin = plugin;
/* No side effect */
