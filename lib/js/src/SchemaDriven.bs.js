// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var SchemaDrivenDict = require("./SchemaDrivenDict.bs.js");
var SchemaDrivenList = require("./SchemaDrivenList.bs.js");
var SchemaDrivenArray = require("./SchemaDrivenArray.bs.js");
var SchemaDrivenEngine = require("./SchemaDrivenEngine.bs.js");
var SchemaDrivenModule = require("./SchemaDrivenModule.bs.js");
var SchemaDrivenObject = require("./SchemaDrivenObject.bs.js");
var SchemaDrivenRecord = require("./SchemaDrivenRecord.bs.js");
var SchemaDrivenTupleN = require("./SchemaDrivenTupleN.bs.js");
var SchemaDrivenOptionNull = require("./SchemaDrivenOptionNull.bs.js");
var SchemaDrivenTupleObject = require("./SchemaDrivenTupleObject.bs.js");
var SchemaDrivenVariantObject = require("./SchemaDrivenVariantObject.bs.js");
var SchemaDrivenVariantLiteral = require("./SchemaDrivenVariantLiteral.bs.js");
var SchemaDrivenVariantContainer = require("./SchemaDrivenVariantContainer.bs.js");

var $$int = SchemaDrivenModule.def("SchemaDrivenInt");

var $$float = SchemaDrivenModule.def("SchemaDrivenFloat");

var string = SchemaDrivenModule.def("SchemaDrivenString");

var bool = SchemaDrivenModule.def("SchemaDrivenBool");

var unknown = SchemaDrivenModule.def("SchemaDrivenUnknown");

function optionNull(moduleName, t, engine) {
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenOptionNull.makeResultCode(moduleName, t));
}

function record(strictOpt, moduleName, props, engine) {
  var strict = strictOpt !== undefined ? strictOpt : false;
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenRecord.makeResultCode(moduleName, props, strict));
}

function object(strictOpt, moduleName, props, engine) {
  var strict = strictOpt !== undefined ? strictOpt : false;
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenObject.makeResultCode(moduleName, props, strict));
}

function tupleN(moduleName, params, engine) {
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenTupleN.makeResultCode(moduleName, params));
}

function tupleObject(strictOpt, moduleName, types, engine) {
  var strict = strictOpt !== undefined ? strictOpt : false;
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenTupleObject.makeResultCode(moduleName, types, strict));
}

function variantObject(tagNameOpt, strictOpt, moduleName, variants, engine) {
  var tagName = tagNameOpt !== undefined ? tagNameOpt : "TAG";
  var strict = strictOpt !== undefined ? strictOpt : false;
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenVariantObject.makeResultCode(moduleName, variants, tagName, strict));
}

function variantContainer(tagNameOpt, strictOpt, moduleName, variants, engine) {
  var tagName = tagNameOpt !== undefined ? tagNameOpt : "TAG";
  var strict = strictOpt !== undefined ? strictOpt : false;
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenVariantContainer.makeResultCode(moduleName, variants, tagName, strict));
}

function variantLiteral(moduleName, variants, engine) {
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenVariantLiteral.makeResultCode(moduleName, variants));
}

function array(moduleName, t, engine) {
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenArray.makeResultCode(moduleName, t));
}

function list(moduleName, t, engine) {
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenList.makeResultCode(moduleName, t));
}

function dict(moduleName, t, engine) {
  return SchemaDrivenEngine.printModule(engine, moduleName, SchemaDrivenDict.makeResultCode(moduleName, t));
}

var defEngine = SchemaDrivenEngine.def;

var publishModules = SchemaDrivenEngine.publish;

exports.defEngine = defEngine;
exports.publishModules = publishModules;
exports.$$int = $$int;
exports.$$float = $$float;
exports.string = string;
exports.bool = bool;
exports.unknown = unknown;
exports.optionNull = optionNull;
exports.record = record;
exports.object = object;
exports.tupleN = tupleN;
exports.tupleObject = tupleObject;
exports.variantObject = variantObject;
exports.variantContainer = variantContainer;
exports.variantLiteral = variantLiteral;
exports.array = array;
exports.list = list;
exports.dict = dict;
/* int Not a pure module */
